%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 91.5625 3.1875 321.938 145.5
/MISOfy
{
    /newfontname exch def
    /oldfontname exch def

    oldfontname findfont
    dup length dict begin
        {1 index /FID ne {def} {pop pop} ifelse} forall
        /Encoding ISOLatin1Encoding def
        currentdict
    end

    newfontname exch definefont pop
} def

0 148.688 translate 1 -1 scale
gsave
150 dict begin
/Mfixwid true def
/Mrot 0 def
/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain	/Courier findfont def
/Bold	/Courier-Bold findfont def
/Italic /Courier-Oblique findfont def
/MathPictureStart {
	/Mimatrix
	 matrix currentmatrix
	def
	gsave
	newpath
	Mleft
	Mbottom
	translate
	/Mtmatrix
	matrix currentmatrix
	def
	Plain
	Mfontsize scalefont
	setfont
	0 setgray
	0 setlinewidth
} bind def
/MathPictureEnd {
	grestore
} bind def
/MathSubStart {
 	     Momatrix
        Mgmatrix Mtmatrix
        Mleft Mbottom
        Mwidth Mheight
        9 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        Mgmatrix setmatrix
        11 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        2 copy translate
        /Mtmatrix matrix currentmatrix def
        /Mleft 0 def
        /Mbottom 0 def
        3 -1 roll
        exch sub
        /Mheight exch def
        sub
        /Mwidth exch def
} bind def
/MathSubEnd {
        /Mheight exch def
        /Mwidth exch def
        /Mbottom exch def
        /Mleft exch def
        /Mtmatrix exch def
        dup setmatrix
        /Mgmatrix exch def
	      /Momatrix exch def
} bind def
/Mdot {
	moveto
	0 0 rlineto
	stroke
} bind def
/Mtetra {
	moveto
	lineto
	lineto
	lineto
	fill
} bind def
/Metetra {
	moveto
	lineto
	lineto
	lineto
	closepath
	gsave
	fill
	grestore
	0 setgray
	stroke
} bind def
/Mistroke {
	flattenpath
	0 0 0
	{
	4 2 roll
	pop pop
	}
	{
	4 -1 roll
	2 index
	sub dup mul
	4 -1 roll
	2 index
	sub dup mul
	add sqrt
	4 -1 roll
	add
	3 1 roll
	}
	{
	stop
	}
	{
	stop
	}
	pathforall
	pop pop
	currentpoint
	stroke
	moveto
	currentdash
	3 -1 roll
	add
	setdash
} bind def
/Mfstroke {
	stroke
	currentdash
	pop 0
	setdash
} bind def
/Mrotsboxa {
	gsave
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	grestore
	Msboxa
	3  -1 roll
	/Mtmatrix
	exch def
	/Mrot
	0 def
} bind def
/Msboxa {
	newpath
	5 -1 roll
	Mvboxa
	pop
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Msboxa1
	5 -3 roll
	Msboxa1
	Mboxrot
	[
	7 -2 roll
	2 copy
	[
	3 1 roll
	10 -1 roll
	9 -1 roll
	]
	6 1 roll
	5 -2 roll
	]
} bind def
/Msboxa1 {
	sub
	2 div
	dup
	2 index
	1 add
	mul
	3 -1 roll
	-1 add
	3 -1 roll
	mul
} bind def
/Mvboxa	{
	Mfixwid
	{
	Mvboxa1
	}
	{
	dup
	Mwidthcal
	0 exch
	{
	add
	}
	forall
	exch
	Mvboxa1
	4 index
	7 -1 roll
	add
	4 -1 roll
	pop
	3 1 roll
	}
	ifelse
} bind def
/Mvboxa1 {
	gsave
	newpath
	[ true
	3 -1 roll
	{
	Mbbox
	5 -1 roll
	{
	0
	5 1 roll
	}
	{
	7 -1 roll
	exch sub
	(m) stringwidth pop
	.3 mul
	sub
	7 1 roll
	6 -1 roll
	4 -1 roll
	Mmin
	3 -1 roll
	5 index
	add
	5 -1 roll
	4 -1 roll
	Mmax
	4 -1 roll
	}
	ifelse
	false
	}
	forall
	{ stop } if
	counttomark
	1 add
	4 roll
	]
	grestore
} bind def
/Mbbox {
	0 0 moveto
	false charpath
	flattenpath
	pathbbox
	newpath
} bind def
/Mmin {
	2 copy
	gt
	{ exch } if
	pop
} bind def
/Mmax {
	2 copy
	lt
	{ exch } if
	pop
} bind def
/Mrotshowa {
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	Mgmatrix setmatrix
	Mshowa
	/Mtmatrix
	exch def
	/Mrot 0 def
} bind def
/Mshowa {
	4 -2 roll
	moveto
	2 index
	Mtmatrix setmatrix
	Mvboxa
	7 1 roll
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Mshowa1
	4 1 roll
	Mshowa1
	rmoveto
	currentpoint
	Mfixwid
	{
	Mshowax
	}
	{
	Mshoway
	}
	ifelse
	pop pop pop pop
	Mgmatrix setmatrix
} bind def
/Mshowax {
	0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
} bind def
/Mshoway {
        3 index
        Mwidthcal
        5 1 roll
	0 1
	4 index length
	-1 add
	{
	2 index
	4 index
	2 index
	get
	3 index
	add
	moveto
	4 index
	exch get
	[
	6 index
	aload
	length
	2 add
	-1 roll
	{
	pop
	Strform
	stringwidth
	pop
	neg
	exch
	add
	0 rmoveto
	}
	exch
	kshow
	cleartomark
	} for
	pop
} bind def
/Mwidthcal {
	[
	exch
	{
	Mwidthcal1
	}
	forall
	]
	[
	exch
	dup
	Maxlen
	-1 add
	0 1
	3 -1 roll
	{
	[
	exch
	2 index
	{
	1 index
	Mget
	exch
	}
	forall
	pop
	Maxget
	exch
	}
	for
	pop
	]
	Mreva
} bind def
/Mreva	{
	[
	exch
	aload
	length
	-1 1
	{1 roll}
	for
	]
} bind def
/Mget	{
	1 index
	length
	-1 add
	1 index
	ge
	{
	get
	}
	{
	pop pop
	0
	}
	ifelse
} bind def
/Maxlen	{
	[
	exch
	{
	length
	}
	forall
	Maxget
} bind def
/Maxget	{
	counttomark
	-1 add
	1 1
	3 -1 roll
	{
	pop
	Mmax
	}
	for
	exch
	pop
} bind def
/Mwidthcal1 {
	[
	exch
	{
	Strform
	stringwidth
	pop
	}
	forall
	]
} bind def
/Strform {
	/tem (x) def
	tem 0
	3 -1 roll
	put
	tem
} bind def
/Mshowa1 {
	2 copy
	add
	4 1 roll
	sub
	mul
	sub
	-2 div
} bind def
/MathScale {
	Mwidth
	Mheight
	Mlp
	translate
	scale
	/yscale exch def
	/ybias exch def
	/xscale exch def
	/xbias exch def
	/Momatrix
	xscale yscale matrix scale
	xbias ybias matrix translate
	matrix concatmatrix def
	/Mgmatrix
	matrix currentmatrix
	def
} bind def
/Mlp {
	3 copy
	Mlpfirst
	{
	Mnodistort
	{
	Mmin
	dup
	} if
	4 index
	2 index
	2 index
	Mlprun
	11 index
	11 -1 roll
	10 -4 roll
	Mlp1
	8 index
	9 -5 roll
	Mlp1
	4 -1 roll
	and
	{ exit } if
	3 -1 roll
	pop pop
	} loop
	exch
	3 1 roll
	7 -3 roll
	pop pop pop
} bind def
/Mlpfirst {
	3 -1 roll
	dup length
	2 copy
	-2 add
	get
	aload
	pop pop pop
	4 -2 roll
	-1 add
	get
	aload
	pop pop pop
	6 -1 roll
	3 -1 roll
	5 -1 roll
	sub
	dup /MsaveAx exch def
	div
	4 1 roll
	exch sub
	dup /MsaveAy exch def
	div
} bind def
/Mlprun {
	2 copy
	4 index
	0 get
	dup
	4 1 roll
	Mlprun1
	3 copy
	8 -2 roll
	9 -1 roll
	{
	3 copy
	Mlprun1
	3 copy
	11 -3 roll
	/gt Mlpminmax
	8 3 roll
	11 -3 roll
	/lt Mlpminmax
	8 3 roll
	} forall
	pop pop pop pop
	3 1 roll
	pop pop
	aload pop
	5 -1 roll
	aload pop
	exch
	6 -1 roll
	Mlprun2
	8 2 roll
	4 -1 roll
	Mlprun2
	6 2 roll
	3 -1 roll
	Mlprun2
	4 2 roll
	exch
	Mlprun2
	6 2 roll
} bind def
/Mlprun1 {
	aload pop
	exch
	6 -1 roll
	5 -1 roll
	mul add
	4 -2 roll
	mul
	3 -1 roll
	add
} bind def
/Mlprun2 {
	2 copy
	add 2 div
	3 1 roll
	exch sub
} bind def
/Mlpminmax {
	cvx
	2 index
	6 index
	2 index
	exec
	{
	7 -3 roll
	4 -1 roll
	} if
	1 index
	5 index
	3 -1 roll
	exec
	{
	4 1 roll
	pop
	5 -1 roll
	aload
	pop pop
	4 -1 roll
	aload pop
	[
	8 -2 roll
	pop
	5 -2 roll
	pop
	6 -2 roll
	pop
	5 -1 roll
	]
	4 1 roll
	pop
	}
	{
	pop pop pop
	} ifelse
} bind def
/Mlp1 {
	5 index
	3 index	sub
	5 index
	2 index mul
	1 index
	le
	1 index
	0 le
	or
	dup
	not
	{
	1 index
	3 index	div
	.99999 mul
	8 -1 roll
	pop
	7 1 roll
	}
	if
	8 -1 roll
	2 div
	7 -2 roll
	pop sub
	5 index
	6 -3 roll
	pop pop
	mul sub
	exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
	outflag
	1
	eq
	{
	/outflag 0 def
	/intop 0 def
	/inrht 0 def
	} if
	5 index
	gsave
	Mtmatrix setmatrix
	Mvboxa pop
	grestore
	3 -1 roll
	pop
	dup
	intop
	gt
	{
	/intop
	exch def
	}
	{ pop }
	ifelse
	dup
	inrht
	gt
	{
	/inrht
	exch def
	}
	{ pop }
	ifelse
	pop
	/inflag
	1 def
} bind def
/Mouter {
	/xadrht 0 def
	/xadlft 0 def
	/yadtop 0 def
	/yadbot 0 def
	inflag
	1 eq
	{
	dup
	0 lt
	{
	dup
	intop
	mul
	neg
	/yadtop
	exch def
	} if
	dup
	0 gt
	{
	dup
	intop
	mul
	/yadbot
	exch def
	}
	if
	pop
	dup
	0 lt
	{
	dup
	inrht
	mul
	neg
	/xadrht
	exch def
	} if
	dup
	0 gt
	{
	dup
	inrht
	mul
	/xadlft
	exch def
	} if
	pop
	/outflag 1 def
	}
	{ pop pop}
	ifelse
	/inflag 0 def
	/inrht 0 def
	/intop 0 def
} bind def
/Mboxout {
	outflag
	1
	eq
	{
	4 -1
	roll
	xadlft
	leadjust
	add
	sub
	4 1 roll
	3 -1
	roll
	yadbot
	leadjust
	add
	sub
	3 1
	roll
	exch
	xadrht
	leadjust
	add
	add
	exch
	yadtop
	leadjust
	add
	add
	/outflag 0 def
	/xadlft 0 def
	/yadbot 0 def
	/xadrht 0 def
	/yadtop 0 def
	} if
} bind def
/leadjust {
	(m) stringwidth pop
	.5 mul
} bind def
/Mrotcheck {
	dup
	90
	eq
	{
	yadbot
	/yadbot
	xadrht
	def
	/xadrht
	yadtop
	def
	/yadtop
	xadlft
	def
	/xadlft
	exch
	def
	}
	if
	dup
	cos
	1 index
	sin
	Checkaux
	dup
	cos
	1 index
	sin neg
	exch
	Checkaux
	3 1 roll
	pop pop
} bind def
/Checkaux {
	4 index
	exch
	4 index
	mul
	3 1 roll
	mul add
	4 1 roll
} bind def
/Mboxrot {
	Mrot
	90 eq
	{
	brotaux
	4 2
	roll
	}
	if
	Mrot
	180 eq
	{
	4 2
        roll
	brotaux
	4 2
	roll
	brotaux
	}
	if
	Mrot
	270 eq
	{
	4 2
	roll
	brotaux
	}
	if
} bind def
/brotaux {
	neg
	exch
	neg
} bind def
/Mabsproc {
        0
        matrix defaultmatrix
        dtransform idtransform
        dup mul exch
        dup mul
        add sqrt
} bind def
/Mabswid {
        Mabsproc
        setlinewidth
} bind def
/Mabsdash {
        exch
        [
        exch
        {
        Mabsproc
        }
        forall
        ]
        exch
        setdash
} bind def
/MBeginOrig { Momatrix concat} bind def
/MEndOrig { Mgmatrix setmatrix} bind def
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop }
repeat
} bind def
} ifelse
% Here are the short operators
/g { setgray} bind def
/k { setcmykcolor} bind def
/m { moveto} bind def
/p { gsave} bind def
/r { setrgbcolor} bind def
/w { setlinewidth} bind def
/C { curveto} bind def
/F { fill} bind def
/L { lineto} bind def
/P { grestore} bind def
/s { stroke} bind def

/MFill {
	0 0 		moveto
	Mwidth 0 	lineto
	Mwidth Mheight 	lineto
	0 Mheight 	lineto
	fill
} bind def

/MPlotRegion {
	3 index
	Mwidth mul
	2 index
	Mheight mul
	translate
	exch sub
	Mheight mul
	/Mheight
	exch def
	exch sub
	Mwidth mul
	/Mwidth
	exch def
} bind def

/Mcharproc
{
  	currentfile
  	(x)
  	readhexstring
  	pop
  	0 get
  	exch
 	div
} bind def

/Mshadeproc
{
	dup
	3 1
	roll
	{
	dup
	Mcharproc
	3 1
	roll
	} repeat
	1 eq
	{
	setgray
	}
	{
	3 eq
	{
	setrgbcolor
	}
	{
	setcmykcolor
	} ifelse
	} ifelse
} bind def

/Mrectproc
{
	3 index
	2 index
	moveto
	2 index
	3 -1
	roll
	lineto
	dup
	3 1
	roll
	lineto
	lineto
	fill
} bind def

/_Mcolorimage
{
	7 1
	roll
	pop
	pop
	matrix
	invertmatrix
	concat
	2 exch exp
	1 sub
	3 1 roll
	1 1
	2 index
	{
	1 1
	4 index
	{
	dup
	1 sub
	exch
	2 index
	dup
	1 sub
	exch
	7 index
	9 index
	Mshadeproc
	Mrectproc
	} for
	pop
	} for
	pop pop pop pop
} bind def

/_Mimage
{
	pop
	matrix
	invertmatrix
	concat
	2 exch exp
	1 sub
	3 1 roll
	1 1
	2 index
	{
	1 1
	4 index
	{
	dup
	1 sub 
	exch
	2 index
	dup
	1 sub
	exch
	7 index
	Mcharproc
	setgray
	Mrectproc
	} for
	pop
	} for
	pop pop pop
} bind def

/Mimage {
	4 index
	4 index
	mul 1600 gt
	{ image }
	{ _Mimage }
	ifelse
} def

/Mcolorimage {
	6 index
	6 index
	mul 1600 gt
	{ colorimage }
	{ _Mcolorimage }
	ifelse
} def
/Mnodistort true def
1.000000 1.000000 scale
91.562500 145.500000 translate
1.000000 -1.000000 scale
0.000000 0.000000 translate
/Mleft		0.000000 def
/Mbottom	0.000000 def
/Mwidth		230.375000 def
/Mheight	142.312500 def
0 setgray
0 setlinewidth
/Courier findfont 12 scalefont setfont
/Mfontsize 12 def
/Plain /Courier findfont def

%!
%%Creator: Mathematica
%%AspectRatio: .61803 
MathPictureStart
/Mabs {
Mgmatrix idtransform
Mtmatrix dtransform
} bind def
/Mabsadd { Mabs
3 -1 roll add
3 1 roll add
exch } bind def
%% Graphics
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.442301 0.0215451 0.350682 0.0150751 [
[.0114 .33818 -9 -9 ]
[.0114 .33818 9 0 ]
[.22685 .33818 -9 -9 ]
[.22685 .33818 9 0 ]
[.65775 .33818 -6 -9 ]
[.65775 .33818 6 0 ]
[.8732 .33818 -6 -9 ]
[.8732 .33818 6 0 ]
[.4298 .04918 -18 -4.5 ]
[.4298 .04918 0 4.5 ]
[.4298 .19993 -18 -4.5 ]
[.4298 .19993 0 4.5 ]
[.4298 .50143 -12 -4.5 ]
[.4298 .50143 0 4.5 ]
[ 0 0 0 0 ]
[ 1 .61803 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
0 g
.25 Mabswid
[ ] 0 setdash
.0114 .35068 m
.0114 .35693 L
s
[(-20)] .0114 .33818 0 1 Mshowa
.22685 .35068 m
.22685 .35693 L
s
[(-10)] .22685 .33818 0 1 Mshowa
.65775 .35068 m
.65775 .35693 L
s
[(10)] .65775 .33818 0 1 Mshowa
.8732 .35068 m
.8732 .35693 L
s
[(20)] .8732 .33818 0 1 Mshowa
.125 Mabswid
.05449 .35068 m
.05449 .35443 L
s
.09758 .35068 m
.09758 .35443 L
s
.14067 .35068 m
.14067 .35443 L
s
.18376 .35068 m
.18376 .35443 L
s
.26994 .35068 m
.26994 .35443 L
s
.31303 .35068 m
.31303 .35443 L
s
.35612 .35068 m
.35612 .35443 L
s
.39921 .35068 m
.39921 .35443 L
s
.48539 .35068 m
.48539 .35443 L
s
.52848 .35068 m
.52848 .35443 L
s
.57157 .35068 m
.57157 .35443 L
s
.61466 .35068 m
.61466 .35443 L
s
.70084 .35068 m
.70084 .35443 L
s
.74393 .35068 m
.74393 .35443 L
s
.78702 .35068 m
.78702 .35443 L
s
.83011 .35068 m
.83011 .35443 L
s
.91629 .35068 m
.91629 .35443 L
s
.95938 .35068 m
.95938 .35443 L
s
.25 Mabswid
0 .35068 m
1 .35068 L
s
.4423 .04918 m
.44855 .04918 L
s
[(-20)] .4298 .04918 1 0 Mshowa
.4423 .19993 m
.44855 .19993 L
s
[(-10)] .4298 .19993 1 0 Mshowa
.4423 .50143 m
.44855 .50143 L
s
[(10)] .4298 .50143 1 0 Mshowa
.125 Mabswid
.4423 .07933 m
.44605 .07933 L
s
.4423 .10948 m
.44605 .10948 L
s
.4423 .13963 m
.44605 .13963 L
s
.4423 .16978 m
.44605 .16978 L
s
.4423 .23008 m
.44605 .23008 L
s
.4423 .26023 m
.44605 .26023 L
s
.4423 .29038 m
.44605 .29038 L
s
.4423 .32053 m
.44605 .32053 L
s
.4423 .38083 m
.44605 .38083 L
s
.4423 .41098 m
.44605 .41098 L
s
.4423 .44113 m
.44605 .44113 L
s
.4423 .47128 m
.44605 .47128 L
s
.4423 .01903 m
.44605 .01903 L
s
.4423 .53158 m
.44605 .53158 L
s
.4423 .56173 m
.44605 .56173 L
s
.4423 .59188 m
.44605 .59188 L
s
.25 Mabswid
.4423 0 m
.4423 .61803 L
s
0 0 m
1 0 L
1 .61803 L
0 .61803 L
closepath
clip
newpath
.5 Mabswid
.36999 .31788 m
.37547 .30995 L
.38349 .30176 L
.39403 .29404 L
.40569 .28784 L
.4131 .28481 L
.42054 .28233 L
.42764 .28043 L
.43547 .27881 L
.43963 .27814 L
.4443 .27754 L
.4486 .27711 L
.45055 .27696 L
.45268 .27683 L
.45397 .27676 L
.45516 .27671 L
.4564 .27666 L
.45753 .27663 L
.4597 .2766 L
.46089 .27659 L
.46201 .27659 L
.46325 .2766 L
.46455 .27662 L
.46567 .27665 L
.46689 .27669 L
.46963 .27682 L
.4722 .27698 L
.47674 .27736 L
.48094 .27784 L
.49043 .27936 L
.49873 .2812 L
.50742 .28367 L
.52193 .28917 L
.53685 .29703 L
.55063 .30703 L
.56138 .31772 L
.56616 .32385 L
.57066 .33091 L
.57449 .33864 L
.576 .34251 L
.57719 .34613 L
.57816 .3497 L
.579 .35368 L
.57933 .35562 L
.57961 .35773 L
.57974 .35889 L
.57984 .35996 L
.57992 .36097 L
.57999 .36206 L
.58007 .36401 L
Mistroke
.5801 .36584 L
.58009 .36696 L
.58006 .36801 L
.57997 .36999 L
.57983 .37188 L
.57965 .37363 L
.57909 .37758 L
.5784 .3811 L
.57759 .38437 L
.57515 .39179 L
.57197 .39896 L
.5677 .40652 L
.55606 .42154 L
.54784 .42952 L
.53924 .43649 L
.52107 .44806 L
.50978 .45368 L
.49874 .45826 L
.47617 .46532 L
.46359 .46812 L
.45703 .46928 L
.44992 .47032 L
.44352 .47107 L
.43766 .47161 L
.43481 .47182 L
.43171 .47201 L
.4288 .47216 L
.42606 .47226 L
.42287 .47235 L
.41934 .47239 L
.4159 .47239 L
.41219 .47233 L
.40874 .47223 L
.40547 .47209 L
.40252 .47192 L
.39931 .47171 L
.39275 .47113 L
.38568 .47032 L
.37291 .46834 L
.35788 .46511 L
.34433 .46133 L
.31755 .45107 L
.30487 .44469 L
.29173 .43682 L
.27025 .42022 L
.25396 .40285 L
.24646 .3924 L
.23967 .3805 L
.23461 .36879 L
.23266 .363 L
Mistroke
.23117 .35764 L
.23 .35246 L
.22902 .34674 L
.22861 .34359 L
.22832 .34065 L
.22812 .33784 L
.22799 .33483 L
.22795 .33201 L
.22798 .32895 L
.2281 .32606 L
.22828 .3234 L
.22849 .32098 L
.22879 .31834 L
.22961 .31299 L
.23096 .30647 L
.23256 .30054 L
.23737 .2873 L
.24335 .27522 L
.25035 .26402 L
.26814 .24267 L
.29234 .22197 L
.31701 .2064 L
.34803 .19192 L
.36519 .18579 L
.38409 .18031 L
.40085 .17647 L
.41971 .1732 L
.43061 .17179 L
.44063 .17079 L
.44622 .17036 L
.45231 .16998 L
.45511 .16984 L
.45809 .16972 L
.46343 .16955 L
.46834 .16947 L
.47363 .16946 L
.47864 .16951 L
.48322 .16962 L
.48859 .16982 L
.49444 .17012 L
.49998 .1705 L
.5051 .17091 L
.51615 .17206 L
.52628 .17341 L
.54895 .17747 L
.56863 .18222 L
.58893 .18843 L
.62265 .20202 L
.65659 .22086 L
.68792 .24476 L
Mistroke
.7117 .26976 L
.72265 .28475 L
.7326 .30182 L
.74006 .31861 L
.74294 .3269 L
.74517 .33459 L
.74693 .34199 L
.74842 .35015 L
.74905 .35464 L
.74952 .35884 L
.74985 .36286 L
.75009 .36716 L
.7502 .37118 L
.75021 .37554 L
.75009 .37966 L
.74989 .38346 L
.74962 .3869 L
.74924 .39068 L
.74818 .39831 L
.74637 .40759 L
.74421 .41603 L
.73763 .43488 L
.72938 .45208 L
.71968 .46802 L
.69501 .49833 L
.66137 .52773 L
.62708 .54987 L
.58393 .5705 L
.56013 .57926 L
.53388 .58712 L
.51064 .59267 L
.48445 .59745 L
.46934 .59955 L
.45545 .60106 L
.4477 .60173 L
.43925 .60233 L
.43124 .60277 L
.42383 .60306 L
.41697 .60324 L
.41053 .60332 L
.40345 .60332 L
.39947 .60327 L
.39583 .60321 L
.38853 .603 L
.38439 .60283 L
.38055 .60265 L
.36603 .6017 L
.35859 .60106 L
.35075 .60026 L
.33674 .59854 L
Mistroke
.30535 .59324 L
.27863 .58708 L
.24998 .57868 L
.19946 .55871 L
.15616 .53511 L
.11169 .50206 L
.07681 .46592 L
.05237 .43009 L
.04171 .4087 L
.034 .38831 L
.031 .37819 L
.0284 .36744 L
.02727 .36177 L
.02621 .35554 L
.02541 .34979 L
.02482 .34456 L
.02435 .33917 L
.02404 .33407 L
.02385 .32868 L
.02381 .32283 L
.02391 .3177 L
.02415 .31227 L
.02447 .30762 L
.02494 .30252 L
.02572 .29608 L
.02664 .28998 L
.02887 .27854 L
.03198 .26626 L
.03622 .25296 L
.04605 .22929 L
.05767 .20779 L
.08812 .16641 L
.12507 .13041 L
.17418 .09514 L
.2052 .07772 L
.23616 .06314 L
.29821 .04078 L
.33313 .03157 L
.37179 .02386 L
.39169 .02084 L
.41356 .01824 L
.42367 .01728 L
.43444 .01643 L
.44378 .01583 L
.45385 .01533 L
.46362 .01498 L
.47257 .01479 L
.48159 .01472 L
.49018 .01475 L
.50014 .01493 L
Mistroke
.5094 .01522 L
.51473 .01545 L
.51956 .01569 L
.53039 .01635 L
.54815 .01781 L
.5676 .01994 L
.60661 .02593 L
.64225 .03349 L
.67488 .04228 L
.7454 .0681 L
.78248 .08608 L
.8144 .10455 L
.86977 .14523 L
.91289 .18831 L
.94994 .24067 L
.96418 .26877 L
.97619 .3008 L
Mfstroke
% End of Graphics
MathPictureEnd

%%PSTrailer
end
grestore

