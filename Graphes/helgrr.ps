%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 91.5625 3.1875 321.938 233.563
/MISOfy
{
    /newfontname exch def
    /oldfontname exch def

    oldfontname findfont
    dup length dict begin
        {1 index /FID ne {def} {pop pop} ifelse} forall
        /Encoding ISOLatin1Encoding def
        currentdict
    end

    newfontname exch definefont pop
} def

0 236.75 translate 1 -1 scale
gsave
150 dict begin
/Mfixwid true def
/Mrot 0 def
/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain	/Courier findfont def
/Bold	/Courier-Bold findfont def
/Italic /Courier-Oblique findfont def
/MathPictureStart {
	/Mimatrix
	 matrix currentmatrix
	def
	gsave
	newpath
	Mleft
	Mbottom
	translate
	/Mtmatrix
	matrix currentmatrix
	def
	Plain
	Mfontsize scalefont
	setfont
	0 setgray
	0 setlinewidth
} bind def
/MathPictureEnd {
	grestore
} bind def
/MathSubStart {
 	     Momatrix
        Mgmatrix Mtmatrix
        Mleft Mbottom
        Mwidth Mheight
        9 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        Mgmatrix setmatrix
        11 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        2 copy translate
        /Mtmatrix matrix currentmatrix def
        /Mleft 0 def
        /Mbottom 0 def
        3 -1 roll
        exch sub
        /Mheight exch def
        sub
        /Mwidth exch def
} bind def
/MathSubEnd {
        /Mheight exch def
        /Mwidth exch def
        /Mbottom exch def
        /Mleft exch def
        /Mtmatrix exch def
        dup setmatrix
        /Mgmatrix exch def
	      /Momatrix exch def
} bind def
/Mdot {
	moveto
	0 0 rlineto
	stroke
} bind def
/Mtetra {
	moveto
	lineto
	lineto
	lineto
	fill
} bind def
/Metetra {
	moveto
	lineto
	lineto
	lineto
	closepath
	gsave
	fill
	grestore
	0 setgray
	stroke
} bind def
/Mistroke {
	flattenpath
	0 0 0
	{
	4 2 roll
	pop pop
	}
	{
	4 -1 roll
	2 index
	sub dup mul
	4 -1 roll
	2 index
	sub dup mul
	add sqrt
	4 -1 roll
	add
	3 1 roll
	}
	{
	stop
	}
	{
	stop
	}
	pathforall
	pop pop
	currentpoint
	stroke
	moveto
	currentdash
	3 -1 roll
	add
	setdash
} bind def
/Mfstroke {
	stroke
	currentdash
	pop 0
	setdash
} bind def
/Mrotsboxa {
	gsave
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	grestore
	Msboxa
	3  -1 roll
	/Mtmatrix
	exch def
	/Mrot
	0 def
} bind def
/Msboxa {
	newpath
	5 -1 roll
	Mvboxa
	pop
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Msboxa1
	5 -3 roll
	Msboxa1
	Mboxrot
	[
	7 -2 roll
	2 copy
	[
	3 1 roll
	10 -1 roll
	9 -1 roll
	]
	6 1 roll
	5 -2 roll
	]
} bind def
/Msboxa1 {
	sub
	2 div
	dup
	2 index
	1 add
	mul
	3 -1 roll
	-1 add
	3 -1 roll
	mul
} bind def
/Mvboxa	{
	Mfixwid
	{
	Mvboxa1
	}
	{
	dup
	Mwidthcal
	0 exch
	{
	add
	}
	forall
	exch
	Mvboxa1
	4 index
	7 -1 roll
	add
	4 -1 roll
	pop
	3 1 roll
	}
	ifelse
} bind def
/Mvboxa1 {
	gsave
	newpath
	[ true
	3 -1 roll
	{
	Mbbox
	5 -1 roll
	{
	0
	5 1 roll
	}
	{
	7 -1 roll
	exch sub
	(m) stringwidth pop
	.3 mul
	sub
	7 1 roll
	6 -1 roll
	4 -1 roll
	Mmin
	3 -1 roll
	5 index
	add
	5 -1 roll
	4 -1 roll
	Mmax
	4 -1 roll
	}
	ifelse
	false
	}
	forall
	{ stop } if
	counttomark
	1 add
	4 roll
	]
	grestore
} bind def
/Mbbox {
	0 0 moveto
	false charpath
	flattenpath
	pathbbox
	newpath
} bind def
/Mmin {
	2 copy
	gt
	{ exch } if
	pop
} bind def
/Mmax {
	2 copy
	lt
	{ exch } if
	pop
} bind def
/Mrotshowa {
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	Mgmatrix setmatrix
	Mshowa
	/Mtmatrix
	exch def
	/Mrot 0 def
} bind def
/Mshowa {
	4 -2 roll
	moveto
	2 index
	Mtmatrix setmatrix
	Mvboxa
	7 1 roll
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Mshowa1
	4 1 roll
	Mshowa1
	rmoveto
	currentpoint
	Mfixwid
	{
	Mshowax
	}
	{
	Mshoway
	}
	ifelse
	pop pop pop pop
	Mgmatrix setmatrix
} bind def
/Mshowax {
	0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
} bind def
/Mshoway {
        3 index
        Mwidthcal
        5 1 roll
	0 1
	4 index length
	-1 add
	{
	2 index
	4 index
	2 index
	get
	3 index
	add
	moveto
	4 index
	exch get
	[
	6 index
	aload
	length
	2 add
	-1 roll
	{
	pop
	Strform
	stringwidth
	pop
	neg
	exch
	add
	0 rmoveto
	}
	exch
	kshow
	cleartomark
	} for
	pop
} bind def
/Mwidthcal {
	[
	exch
	{
	Mwidthcal1
	}
	forall
	]
	[
	exch
	dup
	Maxlen
	-1 add
	0 1
	3 -1 roll
	{
	[
	exch
	2 index
	{
	1 index
	Mget
	exch
	}
	forall
	pop
	Maxget
	exch
	}
	for
	pop
	]
	Mreva
} bind def
/Mreva	{
	[
	exch
	aload
	length
	-1 1
	{1 roll}
	for
	]
} bind def
/Mget	{
	1 index
	length
	-1 add
	1 index
	ge
	{
	get
	}
	{
	pop pop
	0
	}
	ifelse
} bind def
/Maxlen	{
	[
	exch
	{
	length
	}
	forall
	Maxget
} bind def
/Maxget	{
	counttomark
	-1 add
	1 1
	3 -1 roll
	{
	pop
	Mmax
	}
	for
	exch
	pop
} bind def
/Mwidthcal1 {
	[
	exch
	{
	Strform
	stringwidth
	pop
	}
	forall
	]
} bind def
/Strform {
	/tem (x) def
	tem 0
	3 -1 roll
	put
	tem
} bind def
/Mshowa1 {
	2 copy
	add
	4 1 roll
	sub
	mul
	sub
	-2 div
} bind def
/MathScale {
	Mwidth
	Mheight
	Mlp
	translate
	scale
	/yscale exch def
	/ybias exch def
	/xscale exch def
	/xbias exch def
	/Momatrix
	xscale yscale matrix scale
	xbias ybias matrix translate
	matrix concatmatrix def
	/Mgmatrix
	matrix currentmatrix
	def
} bind def
/Mlp {
	3 copy
	Mlpfirst
	{
	Mnodistort
	{
	Mmin
	dup
	} if
	4 index
	2 index
	2 index
	Mlprun
	11 index
	11 -1 roll
	10 -4 roll
	Mlp1
	8 index
	9 -5 roll
	Mlp1
	4 -1 roll
	and
	{ exit } if
	3 -1 roll
	pop pop
	} loop
	exch
	3 1 roll
	7 -3 roll
	pop pop pop
} bind def
/Mlpfirst {
	3 -1 roll
	dup length
	2 copy
	-2 add
	get
	aload
	pop pop pop
	4 -2 roll
	-1 add
	get
	aload
	pop pop pop
	6 -1 roll
	3 -1 roll
	5 -1 roll
	sub
	dup /MsaveAx exch def
	div
	4 1 roll
	exch sub
	dup /MsaveAy exch def
	div
} bind def
/Mlprun {
	2 copy
	4 index
	0 get
	dup
	4 1 roll
	Mlprun1
	3 copy
	8 -2 roll
	9 -1 roll
	{
	3 copy
	Mlprun1
	3 copy
	11 -3 roll
	/gt Mlpminmax
	8 3 roll
	11 -3 roll
	/lt Mlpminmax
	8 3 roll
	} forall
	pop pop pop pop
	3 1 roll
	pop pop
	aload pop
	5 -1 roll
	aload pop
	exch
	6 -1 roll
	Mlprun2
	8 2 roll
	4 -1 roll
	Mlprun2
	6 2 roll
	3 -1 roll
	Mlprun2
	4 2 roll
	exch
	Mlprun2
	6 2 roll
} bind def
/Mlprun1 {
	aload pop
	exch
	6 -1 roll
	5 -1 roll
	mul add
	4 -2 roll
	mul
	3 -1 roll
	add
} bind def
/Mlprun2 {
	2 copy
	add 2 div
	3 1 roll
	exch sub
} bind def
/Mlpminmax {
	cvx
	2 index
	6 index
	2 index
	exec
	{
	7 -3 roll
	4 -1 roll
	} if
	1 index
	5 index
	3 -1 roll
	exec
	{
	4 1 roll
	pop
	5 -1 roll
	aload
	pop pop
	4 -1 roll
	aload pop
	[
	8 -2 roll
	pop
	5 -2 roll
	pop
	6 -2 roll
	pop
	5 -1 roll
	]
	4 1 roll
	pop
	}
	{
	pop pop pop
	} ifelse
} bind def
/Mlp1 {
	5 index
	3 index	sub
	5 index
	2 index mul
	1 index
	le
	1 index
	0 le
	or
	dup
	not
	{
	1 index
	3 index	div
	.99999 mul
	8 -1 roll
	pop
	7 1 roll
	}
	if
	8 -1 roll
	2 div
	7 -2 roll
	pop sub
	5 index
	6 -3 roll
	pop pop
	mul sub
	exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
	outflag
	1
	eq
	{
	/outflag 0 def
	/intop 0 def
	/inrht 0 def
	} if
	5 index
	gsave
	Mtmatrix setmatrix
	Mvboxa pop
	grestore
	3 -1 roll
	pop
	dup
	intop
	gt
	{
	/intop
	exch def
	}
	{ pop }
	ifelse
	dup
	inrht
	gt
	{
	/inrht
	exch def
	}
	{ pop }
	ifelse
	pop
	/inflag
	1 def
} bind def
/Mouter {
	/xadrht 0 def
	/xadlft 0 def
	/yadtop 0 def
	/yadbot 0 def
	inflag
	1 eq
	{
	dup
	0 lt
	{
	dup
	intop
	mul
	neg
	/yadtop
	exch def
	} if
	dup
	0 gt
	{
	dup
	intop
	mul
	/yadbot
	exch def
	}
	if
	pop
	dup
	0 lt
	{
	dup
	inrht
	mul
	neg
	/xadrht
	exch def
	} if
	dup
	0 gt
	{
	dup
	inrht
	mul
	/xadlft
	exch def
	} if
	pop
	/outflag 1 def
	}
	{ pop pop}
	ifelse
	/inflag 0 def
	/inrht 0 def
	/intop 0 def
} bind def
/Mboxout {
	outflag
	1
	eq
	{
	4 -1
	roll
	xadlft
	leadjust
	add
	sub
	4 1 roll
	3 -1
	roll
	yadbot
	leadjust
	add
	sub
	3 1
	roll
	exch
	xadrht
	leadjust
	add
	add
	exch
	yadtop
	leadjust
	add
	add
	/outflag 0 def
	/xadlft 0 def
	/yadbot 0 def
	/xadrht 0 def
	/yadtop 0 def
	} if
} bind def
/leadjust {
	(m) stringwidth pop
	.5 mul
} bind def
/Mrotcheck {
	dup
	90
	eq
	{
	yadbot
	/yadbot
	xadrht
	def
	/xadrht
	yadtop
	def
	/yadtop
	xadlft
	def
	/xadlft
	exch
	def
	}
	if
	dup
	cos
	1 index
	sin
	Checkaux
	dup
	cos
	1 index
	sin neg
	exch
	Checkaux
	3 1 roll
	pop pop
} bind def
/Checkaux {
	4 index
	exch
	4 index
	mul
	3 1 roll
	mul add
	4 1 roll
} bind def
/Mboxrot {
	Mrot
	90 eq
	{
	brotaux
	4 2
	roll
	}
	if
	Mrot
	180 eq
	{
	4 2
        roll
	brotaux
	4 2
	roll
	brotaux
	}
	if
	Mrot
	270 eq
	{
	4 2
	roll
	brotaux
	}
	if
} bind def
/brotaux {
	neg
	exch
	neg
} bind def
/Mabsproc {
        0
        matrix defaultmatrix
        dtransform idtransform
        dup mul exch
        dup mul
        add sqrt
} bind def
/Mabswid {
        Mabsproc
        setlinewidth
} bind def
/Mabsdash {
        exch
        [
        exch
        {
        Mabsproc
        }
        forall
        ]
        exch
        setdash
} bind def
/MBeginOrig { Momatrix concat} bind def
/MEndOrig { Mgmatrix setmatrix} bind def
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop }
repeat
} bind def
} ifelse
% Here are the short operators
/g { setgray} bind def
/k { setcmykcolor} bind def
/m { moveto} bind def
/p { gsave} bind def
/r { setrgbcolor} bind def
/w { setlinewidth} bind def
/C { curveto} bind def
/F { fill} bind def
/L { lineto} bind def
/P { grestore} bind def
/s { stroke} bind def

/MFill {
	0 0 		moveto
	Mwidth 0 	lineto
	Mwidth Mheight 	lineto
	0 Mheight 	lineto
	fill
} bind def

/MPlotRegion {
	3 index
	Mwidth mul
	2 index
	Mheight mul
	translate
	exch sub
	Mheight mul
	/Mheight
	exch def
	exch sub
	Mwidth mul
	/Mwidth
	exch def
} bind def

/Mcharproc
{
  	currentfile
  	(x)
  	readhexstring
  	pop
  	0 get
  	exch
 	div
} bind def

/Mshadeproc
{
	dup
	3 1
	roll
	{
	dup
	Mcharproc
	3 1
	roll
	} repeat
	1 eq
	{
	setgray
	}
	{
	3 eq
	{
	setrgbcolor
	}
	{
	setcmykcolor
	} ifelse
	} ifelse
} bind def

/Mrectproc
{
	3 index
	2 index
	moveto
	2 index
	3 -1
	roll
	lineto
	dup
	3 1
	roll
	lineto
	lineto
	fill
} bind def

/_Mcolorimage
{
	7 1
	roll
	pop
	pop
	matrix
	invertmatrix
	concat
	2 exch exp
	1 sub
	3 1 roll
	1 1
	2 index
	{
	1 1
	4 index
	{
	dup
	1 sub
	exch
	2 index
	dup
	1 sub
	exch
	7 index
	9 index
	Mshadeproc
	Mrectproc
	} for
	pop
	} for
	pop pop pop pop
} bind def

/_Mimage
{
	pop
	matrix
	invertmatrix
	concat
	2 exch exp
	1 sub
	3 1 roll
	1 1
	2 index
	{
	1 1
	4 index
	{
	dup
	1 sub 
	exch
	2 index
	dup
	1 sub
	exch
	7 index
	Mcharproc
	setgray
	Mrectproc
	} for
	pop
	} for
	pop pop pop
} bind def

/Mimage {
	4 index
	4 index
	mul 1600 gt
	{ image }
	{ _Mimage }
	ifelse
} def

/Mcolorimage {
	6 index
	6 index
	mul 1600 gt
	{ colorimage }
	{ _Mcolorimage }
	ifelse
} def
/Mnodistort true def
1.000000 1.000000 scale
91.562500 233.562500 translate
1.000000 -1.000000 scale
0.000000 0.000000 translate
/Mleft		0.000000 def
/Mbottom	0.000000 def
/Mwidth		230.375000 def
/Mheight	230.375000 def
0 setgray
0 setlinewidth
/Courier findfont 12 scalefont setfont
/Mfontsize 12 def
/Plain /Courier findfont def

%!
%%Creator: Mathematica
%%AspectRatio: 1 
MathPictureStart
/Mabs {
Mgmatrix idtransform
Mtmatrix dtransform
} bind def
/Mabsadd { Mabs
3 -1 roll add
3 1 roll add
exch } bind def
%% Graphics3D
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 10  scalefont  setfont
% Scaling calculations
-0.221274 1.4922 -0.0841281 1.08413 [
[ 0 0 0 0 ]
[ 1 1 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
0 0 m
1 0 L
1 1 L
0 1 L
closepath
clip
newpath
.5 Mabswid
[ ] 0 setdash
.73643 .61257 m .67469 .35408 L .52483 .45794 L p .922 .792 .7 r
F P
0 g
s
.52483 .45794 m .59697 .72297 L .73643 .61257 L p .922 .792 .7 r
F P
0 g
s
.67469 .35408 m .46208 .33046 L .30729 .42978 L p .583 .237 .348 r
F P
0 g
s
.34254 .43434 m .42176 .69354 L .59697 .72297 L p .539 .55 .814 r
F P
0 g
s
.52483 .45794 m .59697 .72297 L .78194 .75404 L p .539 .55 .814 r
F P
0 g
s
.59697 .72297 m .52483 .45794 L .34254 .43434 L p .539 .55 .814 r
F P
0 g
s
.59697 .72297 m .52483 .45794 L .35981 .57229 L p .922 .792 .7 r
F P
0 g
s
.35981 .57229 m .44416 .84395 L .59697 .72297 L p .922 .792 .7 r
F P
0 g
s
.90167 .3793 m .67469 .35408 L .52483 .45794 L p .583 .237 .348 r
F P
0 g
s
.30729 .42978 m .52483 .45794 L .67469 .35408 L p .583 .237 .348 r
F P
0 g
s
.67469 .35408 m .60634 .06789 L .44456 .16305 L p .922 .792 .7 r
F P
0 g
s
.44456 .16305 m .52483 .45794 L .67469 .35408 L p .922 .792 .7 r
F P
0 g
s
.75547 .80259 m
.76029 .80676 L
s
.7507 .7984 m
.75547 .80259 L
s
.74597 .79419 m
.7507 .7984 L
s
.74128 .78997 m
.74597 .79419 L
s
.73664 .78572 m
.74128 .78997 L
s
.73203 .78146 m
.73664 .78572 L
s
.72747 .77718 m
.73203 .78146 L
s
.72295 .77288 m
.72747 .77718 L
s
.71847 .76856 m
.72295 .77288 L
s
.71404 .76423 m
.71847 .76856 L
s
.70964 .75988 m
.71404 .76423 L
s
.70529 .75551 m
.70964 .75988 L
s
.70099 .75112 m
.70529 .75551 L
s
.69672 .74672 m
.70099 .75112 L
s
.6925 .7423 m
.69672 .74672 L
s
.68883 .7384 m
.6925 .7423 L
s
.52483 .45794 m .30729 .42978 L .1374 .53878 L p .583 .237 .348 r
F P
0 g
s
.25466 .1468 m .34254 .43434 L .52483 .45794 L p .539 .55 .814 r
F P
0 g
s
.78194 .75404 m .71783 .48292 L .52483 .45794 L p .539 .55 .814 r
F P
0 g
s
.52483 .45794 m .7578 .48809 L .90167 .3793 L p .583 .237 .348 r
F P
0 g
s
.44456 .16305 m .52483 .45794 L .71783 .48292 L p .539 .55 .814 r
F P
0 g
s
.52483 .45794 m .44456 .16305 L .25466 .1468 L p .539 .55 .814 r
F P
0 g
s
.7578 .48809 m .52483 .45794 L .35981 .57229 L p .583 .237 .348 r
F P
0 g
s
.1374 .53878 m .35981 .57229 L .52483 .45794 L p .583 .237 .348 r
F P
0 g
s
.52483 .45794 m .44456 .16305 L .26546 .2684 L p .922 .792 .7 r
F P
0 g
s
.26546 .2684 m .35981 .57229 L .52483 .45794 L p .922 .792 .7 r
F P
0 g
s
.52415 .45544 m
.52483 .45794 L
s
.52284 .45044 m
.52415 .45544 L
s
.52159 .44544 m
.52284 .45044 L
s
.52038 .44044 m
.52159 .44544 L
s
.51923 .43543 m
.52038 .44044 L
s
.51813 .43043 m
.51923 .43543 L
s
.51708 .42542 m
.51813 .43043 L
s
.51608 .42041 m
.51708 .42542 L
s
.51514 .4154 m
.51608 .42041 L
s
.51425 .41039 m
.51514 .4154 L
s
.51341 .40538 m
.51425 .41039 L
s
.51262 .40038 m
.51341 .40538 L
s
.51188 .39537 m
.51262 .40038 L
s
.5112 .39036 m
.51188 .39537 L
s
.51057 .38535 m
.5112 .39036 L
s
.51 .38035 m
.51057 .38535 L
s
.50947 .37535 m
.51 .38035 L
s
.50901 .37034 m
.50947 .37535 L
s
.50859 .36534 m
.50901 .37034 L
s
.50823 .36035 m
.50859 .36534 L
s
.50792 .35535 m
.50823 .36035 L
s
.50766 .35036 m
.50792 .35535 L
s
.50746 .34537 m
.50766 .35036 L
s
.50731 .34038 m
.50746 .34537 L
s
.50722 .3354 m
.50731 .34038 L
s
.50718 .33043 m
.50722 .3354 L
s
.50718 .33043 m
.50719 .32545 L
s
.71783 .48292 m .64627 .18031 L .44456 .16305 L p .539 .55 .814 r
F P
0 g
s
.50719 .32545 m
.50726 .32048 L
s
.50726 .32048 m
.50738 .31552 L
s
.50738 .31552 m
.50756 .31056 L
s
.50756 .31056 m
.50779 .30561 L
s
.50779 .30561 m
.50808 .30066 L
s
.50808 .30066 m
.50842 .29572 L
s
.35981 .57229 m .59884 .6083 L .7578 .48809 L p .583 .237 .348 r
F P
0 g
s
.50842 .29572 m
.50881 .29078 L
s
.50881 .29078 m
.50926 .28585 L
s
.50926 .28585 m
.50977 .28093 L
s
.50977 .28093 m
.51033 .27602 L
s
.51033 .27602 m
.51094 .27111 L
s
.51094 .27111 m
.51161 .26621 L
s
.51161 .26621 m
.51234 .26132 L
s
.51234 .26132 m
.51312 .25644 L
s
.51312 .25644 m
.51396 .25156 L
s
.51396 .25156 m
.51485 .2467 L
s
.51485 .2467 m
.51579 .24184 L
s
.51579 .24184 m
.5168 .23699 L
s
.5168 .23699 m
.51786 .23216 L
s
.51786 .23216 m
.51897 .22733 L
s
.51897 .22733 m
.52014 .22252 L
s
.52014 .22252 m
.52137 .21771 L
s
.52137 .21771 m
.52265 .21292 L
s
.52265 .21292 m
.52398 .20814 L
s
.52398 .20814 m
.52538 .20337 L
s
.52538 .20337 m
.52683 .19861 L
s
.52683 .19861 m
.52833 .19386 L
s
.52833 .19386 m
.5299 .18913 L
s
.5299 .18913 m
.53151 .18441 L
s
.53151 .18441 m
.53319 .17971 L
s
.53319 .17971 m
.53492 .17501 L
s
.53492 .17501 m
.53671 .17034 L
s
.53671 .17034 m
.53855 .16567 L
s
.53855 .16567 m
.54045 .16103 L
s
.54241 .15639 m
.54045 .16103 L
s
.54442 .15177 m
.54241 .15639 L
s
.54649 .14717 m
.54442 .15177 L
s
.54862 .14259 m
.54649 .14717 L
s
.5508 .13802 m
.54862 .14259 L
s
.55304 .13346 m
.5508 .13802 L
s
.55534 .12893 m
.55304 .13346 L
s
.55769 .12441 m
.55534 .12893 L
s
.5601 .11991 m
.55769 .12441 L
s
.56257 .11543 m
.5601 .11991 L
s
.5651 .11097 m
.56257 .11543 L
s
.56768 .10652 m
.5651 .11097 L
s
.57032 .1021 m
.56768 .10652 L
s
.57301 .09769 m
.57032 .1021 L
s
% End of Graphics
MathPictureEnd

%%PSTrailer
end
grestore

